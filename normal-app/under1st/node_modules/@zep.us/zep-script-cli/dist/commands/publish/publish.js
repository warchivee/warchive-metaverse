"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const prompt_1 = __importDefault(require("prompt"));
const form_data_1 = __importDefault(require("form-data"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const ora_1 = __importDefault(require("ora"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const logger_1 = __importDefault(require("../../tools/logger"));
const auth = async (loader, sessionFilePath) => {
    prompt_1.default.start();
    const { email } = await prompt_1.default.get({
        name: "email",
        description: "Enter your email",
        type: "string",
        required: true,
    });
    loader.start("Sending login code to your email...");
    const loginData = { email };
    await axios_1.default.post("https://zep.us/api/v2/signin", loginData);
    loader.succeed();
    const { code } = await prompt_1.default.get({
        name: "code",
        description: "Enter code sent to your email",
        type: "string",
        required: true,
    });
    const confirmData = {
        email,
        t: code,
        isApp: false
    };
    loader.start("Authenticating...");
    const { data } = await axios_1.default.post(`https://zep.us/api/v2/signin/confirm`, confirmData, {
        headers: {
            "Content-Type": "application/json",
        },
    });
    const loginToken = data.loginToken;
    await fs_extra_1.default.writeFile(sessionFilePath, loginToken);
    loader.succeed();
};
exports.default = (async function publish([], options) {
    const cwd = process.cwd();
    const root = options.projectRoot || cwd;
    const loader = (0, ora_1.default)();
    try {
        const configJsonPath = path_1.default.join(root, "zep-script.json");
        const configJsonObject = JSON.parse(fs_extra_1.default.readFileSync(configJsonPath).toString());
        const sessionFilePath = path_1.default.join(os_1.default.homedir(), ".zscsession");
        if (!fs_extra_1.default.existsSync(sessionFilePath)) {
            await auth(loader, sessionFilePath);
        }
        const loginToken = (await fs_extra_1.default.readFile(sessionFilePath)).toString();
        const archiveFiles = fs_extra_1.default
            .readdirSync(root)
            .filter((file) => file.endsWith(".zepapp.zip"));
        const archiveFile = fs_extra_1.default.createReadStream(archiveFiles[0]);
        const formData = new form_data_1.default();
        formData.append("file", archiveFile, archiveFiles[0]);
        formData.append("name", configJsonObject.name);
        formData.append("description", configJsonObject.description);
        formData.append("appHashId", configJsonObject.appId);
        let type = "1";
        switch (configJsonObject.type) {
            case "minigame":
                type = "2";
                break;
            case "sidebar":
                type = "3";
        }
        formData.append("type", type);
        loader.start("Publishing...");
        const length = await new Promise((resolve) => formData.getLength((e, l) => resolve(l)));
        await axios_1.default.put(`https://zep.us/api/v2/me/apps`, formData, {
            headers: Object.assign({ "X-Token": loginToken, "Content-Length": length }, formData.getHeaders()),
        });
        loader.succeed();
    }
    catch (e) {
        loader.fail();
        if (e instanceof Error) {
            logger_1.default.error(e.message);
        }
    }
});
